apiVersion: v1
kind: Namespace
metadata:
  name: ratewatch
---
apiVersion: v1
kind: Secret
metadata:
  name: ratewatch-secrets
  namespace: ratewatch
type: Opaque
stringData:
  api-key-secret: "change-this-to-a-secure-random-string-minimum-32-characters"
  redis-password: "your-redis-password-here"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ratewatch-config
  namespace: ratewatch
data:
  RUST_LOG: "info"
  PORT: "8081"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: ratewatch
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command: ["redis-server"]
        args: ["--appendonly", "yes", "--requirepass", "$(REDIS_PASSWORD)"]
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ratewatch-secrets
              key: redis-password
        volumeMounts:
        - name: redis-data
          mountPath: /data
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: ratewatch
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: ratewatch
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ratewatch
  namespace: ratewatch
spec:
  replicas: 3
  selector:
    matchLabels:
      app: ratewatch
  template:
    metadata:
      labels:
        app: ratewatch
    spec:
      containers:
      - name: ratewatch
        image: ghcr.io/vivekjami/ratewatch:latest
        ports:
        - containerPort: 8081
        env:
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@redis-service:6379"
        - name: API_KEY_SECRET
          valueFrom:
            secretKeyRef:
              name: ratewatch-secrets
              key: api-key-secret
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ratewatch-secrets
              key: redis-password
        envFrom:
        - configMapRef:
            name: ratewatch-config
        livenessProbe:
          httpGet:
            path: /health
            port: 8081
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "200m"
---
apiVersion: v1
kind: Service
metadata:
  name: ratewatch-service
  namespace: ratewatch
spec:
  selector:
    app: ratewatch
  ports:
  - port: 80
    targetPort: 8081
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ratewatch-ingress
  namespace: ratewatch
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-burst: "200"
spec:
  tls:
  - hosts:
    - your-domain.com
    secretName: ratewatch-tls
  rules:
  - host: your-domain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: ratewatch-service
            port:
              number: 80
