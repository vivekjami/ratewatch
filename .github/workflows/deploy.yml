name: Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging"

          # Create staging deployment configuration
          cat > staging-deploy.yml << EOF
          version: '3.8'
          services:
            redis:
              image: redis:7-alpine
              command: redis-server --requirepass \${REDIS_PASSWORD:-staging-redis-pass}
              environment:
                - REDIS_PASSWORD=\${REDIS_PASSWORD:-staging-redis-pass}
              healthcheck:
                test: ["CMD", "redis-cli", "-a", "\${REDIS_PASSWORD:-staging-redis-pass}", "ping"]
                interval: 10s
                timeout: 5s
                retries: 3
              networks:
                - ratewatch-network
            
            ratewatch:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging
              ports:
                - "8081:8081"
              environment:
                - REDIS_URL=redis://:\${REDIS_PASSWORD:-staging-redis-pass}@redis:6379
                - API_KEY_SECRET=\${API_KEY_SECRET:-test-api-key-12345678901234567890123}
                - RUST_LOG=info
              depends_on:
                redis:
                  condition: service_healthy
              healthcheck:
                test: ["CMD-SHELL", "curl -f http://localhost:8081/health/ready || exit 1"]
                interval: 30s
                timeout: 10s
                retries: 5
                start_period: 40s
              networks:
                - ratewatch-network

          networks:
            ratewatch-network:
              driver: bridge
          EOF

          echo "Staging deployment configuration created"
          
          # Start the staging environment
          export REDIS_PASSWORD=staging-redis-pass
          export API_KEY_SECRET=test-api-key-12345678901234567890123
          docker-compose -f staging-deploy.yml up -d
          
          echo "Waiting for services to be healthy..."

      - name: Run smoke tests
        run: |
          echo "Running smoke tests against staging..."

          # Wait for service to be ready
          echo "Waiting for service to be ready..."
          timeout 120 bash -c 'until curl -f http://localhost:8081/health/ready; do echo "Service not ready, waiting..."; sleep 5; done'

          # Test basic health endpoint
          echo "Testing basic health endpoint..."
          curl -f http://localhost:8081/health

          # Test detailed health endpoint
          echo "Testing detailed health endpoint..."
          curl -f http://localhost:8081/health/detailed

          # Test readiness endpoint
          echo "Testing readiness endpoint..."
          curl -f http://localhost:8081/health/ready

          # Test rate limiting with test API key
          echo "Testing rate limiting functionality..."
          curl -X POST http://localhost:8081/v1/check \
            -H "Authorization: Bearer test-api-key-12345678901234567890123" \
            -H "Content-Type: application/json" \
            -d '{"key": "staging-test", "limit": 10, "window": 60, "cost": 1}' \
            -f

          # Test rate limit enforcement
          echo "Testing rate limit enforcement..."
          for i in {1..12}; do
            response_code=$(curl -s -w "%{http_code}" -o /dev/null -X POST http://localhost:8081/v1/check \
              -H "Authorization: Bearer test-api-key-12345678901234567890123" \
              -H "Content-Type: application/json" \
              -d '{"key": "rate-limit-test", "limit": 10, "window": 60, "cost": 1}')
            
            if [ $i -le 10 ] && [ "$response_code" != "200" ]; then
              echo "❌ Expected 200 for request $i, got $response_code"
              exit 1
            elif [ $i -gt 10 ] && [ "$response_code" != "429" ]; then
              echo "❌ Expected 429 for request $i (rate limited), got $response_code"
              exit 1
            fi
            echo "Request $i: HTTP $response_code ✓"
          done

          echo "✅ All staging smoke tests passed"

      - name: Cleanup staging environment
        if: always()
        run: |
          echo "Cleaning up staging environment..."
          docker-compose -f staging-deploy.yml down -v || true
          docker system prune -f || true

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    environment: production
    permissions:
      contents: read
      packages: write
    # Uncomment the line below if you want production to depend on staging deployment
    # needs: [deploy-staging]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:production
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:production"
          # Add your production deployment commands here
          # Example: kubectl set image deployment/ratewatch ratewatch=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:production

      - name: Run production health checks
        run: |
          echo "Running production health checks..."
          # Add production health check commands here
          # Example: curl -f https://api.ratewatch.dev/health

      - name: Notify deployment success
        run: |
          echo "Production deployment successful!"
          # Add notification commands here (Slack, email, etc.)

  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: failure() && github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    environment: production
    needs: [deploy-production]

    steps:
      - name: Rollback production deployment
        run: |
          echo "Rolling back production deployment..."
          # Add rollback commands here
          # Example: kubectl rollout undo deployment/ratewatch

      - name: Notify rollback
        run: |
          echo "Production rollback completed!"
          # Add notification commands here
