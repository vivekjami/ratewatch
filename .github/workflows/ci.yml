name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Run tests
      run: cargo test --all --verbose
      env:
        REDIS_URL: redis://localhost:6379
    
    - name: Install cargo-audit
      run: cargo install cargo-audit --locked
    
    - name: Run security audit
      run: cargo audit

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Build release binary
      run: cargo build --release
    
    - name: Start RateWatch server
      run: |
        REDIS_URL=redis://localhost:6379 API_KEY_SECRET=test-secret ./target/release/ratewatch &
        sleep 5
      env:
        RUST_LOG: info
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests
    
    - name: Create integration test
      run: |
        cat > integration_test.py << 'EOF'
        #!/usr/bin/env python3
        import requests
        import sys
        import time
        
        BASE_URL = "http://localhost:8081"
        API_KEY = "test-api-key-12345678901234567890123"
        
        def test_basic_functionality():
            headers = {"Authorization": f"Bearer {API_KEY}", "Content-Type": "application/json"}
            payload = {"key": "ci-test", "limit": 10, "window": 60, "cost": 1}
            
            response = requests.post(f"{BASE_URL}/v1/check", json=payload, headers=headers)
            if response.status_code == 200:
                data = response.json()
                if data["allowed"]:
                    print("✅ Basic functionality test passed")
                    return True
            print("❌ Basic functionality test failed")
            return False
        
        def test_health_check():
            response = requests.get(f"{BASE_URL}/health")
            if response.status_code == 200:
                print("✅ Health check test passed")
                return True
            print("❌ Health check test failed")
            return False
        
        if __name__ == "__main__":
            time.sleep(2)  # Wait for server to be ready
            tests = [test_health_check, test_basic_functionality]
            passed = sum(1 for test in tests if test())
            print(f"Tests passed: {passed}/{len(tests)}")
            sys.exit(0 if passed == len(tests) else 1)
        EOF
    
    - name: Run integration tests
      run: python3 integration_test.py
    
    - name: Test Python client
      run: |
        cd clients/python
        python3 -c "
        import sys
        sys.path.insert(0, '.')
        from ratewatch import RateWatch
        client = RateWatch('test-key')
        print('✅ Python client imports successfully')
        "
    
    - name: Test Node.js client
      run: |
        cd clients/nodejs
        npm install --silent
        npm run build --silent
        node -e "
        const { RateWatch } = require('./dist/index.js');
        const client = new RateWatch('test-key');
        console.log('✅ Node.js client imports successfully');
        "

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v4
    
    - name: Build Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: false
        tags: ratewatch:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run -d --name redis redis:7-alpine
        sleep 5
        docker run -d --name ratewatch --link redis:redis -p 8081:8081 \
          -e REDIS_URL=redis://redis:6379 \
          -e API_KEY_SECRET=test-secret \
          ratewatch:${{ github.sha }}
        sleep 10
        curl -f http://localhost:8081/health || exit 1

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.24.0
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'